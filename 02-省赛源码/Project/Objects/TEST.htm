<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Mar 22 08:34:15 2025
<BR><P>
<H3>Maximum Stack Usage =        604 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HMI_get_wight_string &rArr; parse_lcd_string_data &rArr; my_strdup &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ae]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">ADC_IRQHandler</a><BR>
 <LI><a href="#[96]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">BusFault_Handler</a><BR>
 <LI><a href="#[94]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94]">HardFault_Handler</a><BR>
 <LI><a href="#[95]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95]">MemManage_Handler</a><BR>
 <LI><a href="#[97]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[97]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ae]">ADC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3a]">BEEP_Control</a> from beep.o(i.BEEP_Control) referenced 2 times from beep.o(.data)
 <LI><a href="#[39]">BEEP_Init</a> from beep.o(i.BEEP_Init) referenced 2 times from beep.o(.data)
 <LI><a href="#[40]">BH1750_Get_Lx</a> from bh1750.o(i.BH1750_Get_Lx) referenced 2 times from bh1750.o(.data)
 <LI><a href="#[3f]">BH1750_Init</a> from bh1750.o(i.BH1750_Init) referenced 2 times from bh1750.o(.data)
 <LI><a href="#[42]">BH1750_Read</a> from bh1750.o(i.BH1750_Read) referenced 2 times from bh1750.o(.data)
 <LI><a href="#[41]">BH1750_Test</a> from bh1750.o(i.BH1750_Test) referenced 2 times from bh1750.o(.data)
 <LI><a href="#[3b]">Beep_Play_Music</a> from beep.o(i.Beep_Play_Music) referenced 2 times from beep.o(.data)
 <LI><a href="#[5d]">Bkrc_Send_Cmd</a> from speak.o(i.Bkrc_Send_Cmd) referenced 2 times from speak.o(.data)
 <LI><a href="#[96]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[68]">C1016_Enroll</a> from c1016.o(i.C1016_Enroll) referenced 2 times from c1016.o(.data)
 <LI><a href="#[69]">C1016_Identify</a> from c1016.o(i.C1016_Identify) referenced 2 times from c1016.o(.data)
 <LI><a href="#[67]">C1016_Init</a> from c1016.o(i.C1016_Init) referenced 2 times from c1016.o(.data)
 <LI><a href="#[6b]">C1016_Print_Format_Ids</a> from c1016.o(i.C1016_Print_Format_Ids) referenced 2 times from c1016.o(.data)
 <LI><a href="#[6a]">C1016_cmd_Delete</a> from c1016.o(i.C1016_cmd_Delete) referenced 2 times from c1016.o(.data)
 <LI><a href="#[b2]">CAN0_EWMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b0]">CAN0_RX0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b1]">CAN0_RX1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[af]">CAN0_TX_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[de]">CAN1_EWMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[dc]">CAN1_RX0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[dd]">CAN1_RX1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[db]">CAN1_TX_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[50]">CH455G_Init</a> from ch455g.o(i.CH455G_Init) referenced 2 times from ch455g.o(.data)
 <LI><a href="#[75]">Corotation</a> from step_motor.o(i.Corotation) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[ea]">DCI_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[6d]">DHT11_GetHumidity</a> from dht11.o(i.DHT11_GetHumidity) referenced 2 times from dht11.o(.data)
 <LI><a href="#[6c]">DHT11_GetTemperature</a> from dht11.o(i.DHT11_GetTemperature) referenced 2 times from dht11.o(.data)
 <LI><a href="#[6e]">DHT11_Init</a> from dht11.o(i.DHT11_Init) referenced 2 times from dht11.o(.data)
 <LI><a href="#[70]">DHT11_Test</a> from dht11.o(i.DHT11_Test) referenced 2 times from dht11.o(.data)
 <LI><a href="#[6f]">DHT11_Update</a> from dht11.o(i.DHT11_Update) referenced 2 times from dht11.o(.data)
 <LI><a href="#[a7]">DMA0_Channel0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a8]">DMA0_Channel1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a9]">DMA0_Channel2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[aa]">DMA0_Channel3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ab]">DMA0_Channel4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ac]">DMA0_Channel5_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ad]">DMA0_Channel6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[cb]">DMA0_Channel7_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d4]">DMA1_Channel0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d5]">DMA1_Channel1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d6]">DMA1_Channel2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d7]">DMA1_Channel3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d8]">DMA1_Channel4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e0]">DMA1_Channel5_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e1]">DMA1_Channel6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e2]">DMA1_Channel7_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[72]">DS18B20_GetTemperature</a> from ds18b20.o(i.DS18B20_GetTemperature) referenced 2 times from ds18b20.o(.data)
 <LI><a href="#[71]">DS18B20_Initialize</a> from ds18b20.o(i.DS18B20_Initialize) referenced 2 times from ds18b20.o(.data)
 <LI><a href="#[99]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d9]">ENET_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[da]">ENET_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[cc]">EXMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a2]">EXTI0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c4]">EXTI10_15_IRQHandler</a> from exti.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a3]">EXTI1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a4]">EXTI2_IRQHandler</a> from gd32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a5]">EXTI3_IRQHandler</a> from gd32f4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a6]">EXTI4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b3]">EXTI5_9_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a0]">FMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ec]">FPU_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[7b]">Fan_Init</a> from fan.o(i.Fan_Init) referenced 2 times from fan.o(.data)
 <LI><a href="#[7c]">Fan_Set_Speed</a> from fan.o(i.Fan_Set_Speed) referenced 2 times from fan.o(.data)
 <LI><a href="#[43]">GPIO_HX711_Init</a> from hx711.o(i.GPIO_HX711_Init) referenced 2 times from hx711.o(.data)
 <LI><a href="#[52]">Get_Key_Press_Count</a> from ch455g.o(i.Get_Key_Press_Count) referenced 2 times from ch455g.o(.data)
 <LI><a href="#[44]">Get_Weight</a> from hx711.o(i.Get_Weight) referenced 2 times from hx711.o(.data)
 <LI><a href="#[80]">HC595_Init</a> from _74hc595.o(i.HC595_Init) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[65]">HMI_get_widget_val</a> from usart_lcd.o(i.HMI_get_widget_val) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[66]">HMI_get_wight_string</a> from usart_lcd.o(i.HMI_get_wight_string) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[61]">HMI_printf</a> from usart_lcd.o(i.HMI_printf) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[63]">HMI_send_cmd</a> from usart_lcd.o(i.HMI_send_cmd) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[64]">HMI_send_curve</a> from usart_lcd.o(i.HMI_send_curve) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[60]">HMI_send_string</a> from usart_lcd.o(i.HMI_send_string) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[62]">HMI_send_to_slider</a> from usart_lcd.o(i.HMI_send_to_slider) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[94]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[bc]">I2C0_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[bb]">I2C0_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[be]">I2C1_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[bd]">I2C1_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e5]">I2C2_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e4]">I2C2_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[91]">Infrared_Distance_Get_Value</a> from infrared_distance.o(i.Infrared_Distance_Get_Value) referenced 2 times from infrared_distance.o(.data)
 <LI><a href="#[90]">Infrared_Distance_Init</a> from infrared_distance.o(i.Infrared_Distance_Init) referenced 2 times from infrared_distance.o(.data)
 <LI><a href="#[58]">InitRc522</a> from rc522.o(i.InitRc522) referenced 2 times from rc522.o(.data)
 <LI><a href="#[3d]">KEY_Init</a> from key.o(i.KEY_Init) referenced 2 times from key.o(.data)
 <LI><a href="#[89]">LED595Init</a> from nixie.o(i.LED595Init) referenced 2 times from nixie.o(.data)
 <LI><a href="#[34]">LED_Blink_Control</a> from rgb_led.o(i.LED_Blink_Control) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[32]">LED_Breath</a> from rgb_led.o(i.LED_Breath) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[36]">LED_OFF</a> from rgb_led.o(i.LED_OFF) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[35]">LED_Set_Color</a> from rgb_led.o(i.LED_Set_Color) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[37]">LED_Set_Color_TimerPwm</a> from rgb_led.o(i.LED_Set_Color_TimerPwm) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[33]">LED_Set_Rgb</a> from rgb_led.o(i.LED_Set_Rgb) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[38]">LED_Stop_TimerPwm</a> from rgb_led.o(i.LED_Stop_TimerPwm) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[31]">LED_Test</a> from rgb_led.o(i.LED_Test) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[f0]">LED_TimerPwm_Callback</a> from rgb_led.o(i.LED_TimerPwm_Callback) referenced from rgb_led.o(i.LED_Timer_CreateOrRestart)
 <LI><a href="#[9d]">LVD_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[53]">MPU6050_Init</a> from mpu6050.o(i.MPU6050_Init) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[57]">MPU6050_Test</a> from mpu6050.o(i.MPU6050_Test) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[54]">MPU_GetData</a> from mpu6050.o(i.MPU_GetData) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[56]">MPU_Get_Gyroscope</a> from mpu6050.o(i.MPU_Get_Gyroscope) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[55]">MPU_Get_Temperature</a> from mpu6050.o(i.MPU_Get_Temperature) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[87]">Matrix_Display_Clear</a> from _74hc595.o(i.Matrix_Display_Clear) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[86]">Matrix_Display_CountDown_99_Blocking</a> from _74hc595.o(i.Matrix_Display_CountDown_99_Blocking) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[85]">Matrix_Display_CountUp_99_Blocking</a> from _74hc595.o(i.Matrix_Display_CountUp_99_Blocking) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[83]">Matrix_Display_CountUp_Blocking_9</a> from _74hc595.o(i.Matrix_Display_CountUp_Blocking_9) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[84]">Matrix_Display_Count_Down_Blocking_9</a> from _74hc595.o(i.Matrix_Display_Count_Down_Blocking_9) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[88]">Matrix_Display_Img</a> from _74hc595.o(i.Matrix_Display_Img) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[82]">Matrix_Display_Scroll</a> from _74hc595.o(i.Matrix_Display_Scroll) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[81]">Matrix_Display_Static</a> from _74hc595.o(i.Matrix_Display_Static) referenced 2 times from _74hc595.o(.data)
 <LI><a href="#[95]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[93]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[8c]">Nixie_Count_Down_Blocking</a> from nixie.o(i.Nixie_Count_Down_Blocking) referenced 2 times from nixie.o(.data)
 <LI><a href="#[8d]">Nixie_Count_Up_Blocking</a> from nixie.o(i.Nixie_Count_Up_Blocking) referenced 2 times from nixie.o(.data)
 <LI><a href="#[8a]">Nixie_Off</a> from nixie.o(i.Nixie_Off) referenced 2 times from nixie.o(.data)
 <LI><a href="#[8b]">Nixie_ShowNum</a> from nixie.o(i.Nixie_ShowNum) referenced 2 times from nixie.o(.data)
 <LI><a href="#[47]">OLED_Clear</a> from oled.o(i.OLED_Clear) referenced 2 times from oled.o(.data)
 <LI><a href="#[4e]">OLED_DrawBMP</a> from oled.o(i.OLED_DrawBMP) referenced 2 times from oled.o(.data)
 <LI><a href="#[4b]">OLED_DrawFont16</a> from oled.o(i.OLED_DrawFont16) referenced 2 times from oled.o(.data)
 <LI><a href="#[4c]">OLED_DrawFont32</a> from oled.o(i.OLED_DrawFont32) referenced 2 times from oled.o(.data)
 <LI><a href="#[46]">OLED_Init</a> from oled.o(i.OLED_Init) referenced 2 times from oled.o(.data)
 <LI><a href="#[4f]">OLED_Print</a> from oled.o(i.OLED_Print) referenced 2 times from oled.o(.data)
 <LI><a href="#[48]">OLED_ShowChar</a> from oled.o(i.OLED_ShowChar) referenced 2 times from oled.o(.data)
 <LI><a href="#[4a]">OLED_ShowInt32Num</a> from oled.o(i.OLED_ShowInt32Num) referenced 2 times from oled.o(.data)
 <LI><a href="#[49]">OLED_ShowString</a> from oled.o(i.OLED_ShowString) referenced 2 times from oled.o(.data)
 <LI><a href="#[4d]">OLED_Show_Str</a> from oled.o(i.OLED_Show_Str) referenced 2 times from oled.o(.data)
 <LI><a href="#[9a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3c]">Play_Db</a> from beep.o(i.Play_Db) referenced 2 times from beep.o(.data)
 <LI><a href="#[59]">RC522_Read</a> from rc522.o(i.RC522_Read) referenced 2 times from rc522.o(.data)
 <LI><a href="#[5a]">RC522_Write</a> from rc522.o(i.RC522_Write) referenced 2 times from rc522.o(.data)
 <LI><a href="#[a1]">RCU_CTC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[30]">RGB_LED_Init</a> from rgb_led.o(i.RGB_LED_Init) referenced 2 times from rgb_led.o(.data)
 <LI><a href="#[c5]">RTC_Alarm_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[9f]">RTC_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[51]">Read_Keyboard</a> from ch455g.o(i.Read_Keyboard) referenced 2 times from ch455g.o(.data)
 <LI><a href="#[92]">Reset_Handler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[76]">Reverse</a> from step_motor.o(i.Reverse) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[cd]">SDIO_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[bf]">SPI0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c0]">SPI1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[cf]">SPI2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[74]">STOP</a> from step_motor.o(i.STOP) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[98]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[8e]">Servo_Init</a> from servo.o(i.Servo_Init) referenced 2 times from servo.o(.data)
 <LI><a href="#[8f]">Servo_Set_Angle</a> from servo.o(i.Servo_Set_Angle) referenced 2 times from servo.o(.data)
 <LI><a href="#[73]">Step_Hardware_Init</a> from step_motor.o(i.Step_Hardware_Init) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[9b]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ee]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f407.o(.text)
 <LI><a href="#[9e]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[18]">TASK10_Thread</a> from button_callback.o(i.TASK10_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1a]">TASK11_Thread</a> from button_callback.o(i.TASK11_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1c]">TASK12_Thread</a> from button_callback.o(i.TASK12_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1e]">TASK13_Thread</a> from button_callback.o(i.TASK13_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[20]">TASK14_Thread</a> from button_callback.o(i.TASK14_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[22]">TASK15_Thread</a> from button_callback.o(i.TASK15_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[26]">TASK16_Thread</a> from button_callback.o(i.TASK16_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[28]">TASK17_Thread</a> from button_callback.o(i.TASK17_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2a]">TASK18_Thread</a> from button_callback.o(i.TASK18_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2c]">TASK19_Thread</a> from button_callback.o(i.TASK19_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1]">TASK1_Thread</a> from button_callback.o(i.TASK1_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2e]">TASK20_Thread</a> from button_callback.o(i.TASK20_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[3]">TASK2_Thread</a> from button_callback.o(i.TASK2_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[5]">TASK3_Thread</a> from button_callback.o(i.TASK3_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[7]">TASK4_Thread</a> from button_callback.o(i.TASK4_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[9]">TASK5_Thread</a> from button_callback.o(i.TASK5_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[b]">TASK6_Thread</a> from button_callback.o(i.TASK6_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[d]">TASK7_Thread</a> from button_callback.o(i.TASK7_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[f]">TASK8_Thread</a> from button_callback.o(i.TASK8_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[13]">TASK9_Thread</a> from button_callback.o(i.TASK9_Thread) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[b4]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b7]">TIMER0_Channel_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b6]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b5]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b8]">TIMER1_IRQHandler</a> from gd32f4xx_it.o(i.TIMER1_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b9]">TIMER2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ba]">TIMER3_IRQHandler</a> from gd32f4xx_it.o(i.TIMER3_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ce]">TIMER4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d2]">TIMER5_DAC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d3]">TIMER6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c7]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ca]">TIMER7_Channel_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c9]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c8]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[eb]">TRNG_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d0]">UART3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d1]">UART4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c1]">USART0_IRQHandler</a> from gd32f4xx_it.o(i.USART0_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c2]">USART1_IRQHandler</a> from gd32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c3]">USART2_IRQHandler</a> from gd32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e3]">USART5_IRQHandler</a> from gd32f4xx_it.o(i.USART5_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[df]">USBFS_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c6]">USBFS_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e7]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e6]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e9]">USBHS_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e8]">USBHS_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[fa]">UartProcessTask</a> from main.o(i.UartProcessTask) referenced from main.o(i.freertos_init)
 <LI><a href="#[7f]">Ultrasonic_Get_Cm</a> from ultrasonic.o(i.Ultrasonic_Get_Cm) referenced 2 times from ultrasonic.o(.data)
 <LI><a href="#[7d]">Ultrasonic_Init</a> from ultrasonic.o(i.Ultrasonic_Init) referenced 2 times from ultrasonic.o(.data)
 <LI><a href="#[7e]">Ultrasonic_Test</a> from ultrasonic.o(i.Ultrasonic_Test) referenced 2 times from ultrasonic.o(.data)
 <LI><a href="#[97]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5e]">VoiceAnnouncementDigit</a> from speak.o(i.VoiceAnnouncementDigit) referenced 2 times from speak.o(.data)
 <LI><a href="#[5c]">Voice_Drive</a> from speak.o(i.Voice_Drive) referenced 2 times from speak.o(.data)
 <LI><a href="#[5b]">Voice_Init</a> from speak.o(i.Voice_Init) referenced 2 times from speak.o(.data)
 <LI><a href="#[9c]">WWDGT_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[ef]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f407.o(.text)
 <LI><a href="#[f8]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[f8]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[f9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[f4]">bkrc_callback</a> from button_callback.o(i.bkrc_callback) referenced from button_callback.o(i.TASK3_Thread)
 <LI><a href="#[f7]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7a]">get_motor_speed</a> from motor.o(i.get_motor_speed) referenced 2 times from motor.o(.data)
 <LI><a href="#[f2]">key_callback</a> from button_callback.o(i.key_callback) referenced from button_callback.o(i.TASK13_Thread)
 <LI><a href="#[f1]">keyboard_callback</a> from button_callback.o(i.keyboard_callback) referenced from button_callback.o(i.TASK12_Thread)
 <LI><a href="#[ed]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[78]">motor_init</a> from motor.o(i.motor_init) referenced 2 times from motor.o(.data)
 <LI><a href="#[fd]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[fb]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[fe]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[f5]">rc522_log_callback</a> from button_callback.o(i.rc522_log_callback) referenced from button_callback.o(i.TASK8_Thread)
 <LI><a href="#[3e]">read_all_keys</a> from key.o(i.read_all_keys) referenced 2 times from key.o(.data)
 <LI><a href="#[79]">set_motor_speed</a> from motor.o(i.set_motor_speed) referenced 2 times from motor.o(.data)
 <LI><a href="#[77]">step_motor_set_speed</a> from step_motor.o(i.step_motor_set_speed) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[19]">task10_releases</a> from button_callback.o(i.task10_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1b]">task11_releases</a> from button_callback.o(i.task11_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1d]">task12_releases</a> from button_callback.o(i.task12_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[1f]">task13_releases</a> from button_callback.o(i.task13_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[21]">task14_releases</a> from button_callback.o(i.task14_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[24]">task15_corotation</a> from button_callback.o(i.task15_corotation) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[23]">task15_releases</a> from button_callback.o(i.task15_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[25]">task15_reversal</a> from button_callback.o(i.task15_reversal) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[27]">task16_releases</a> from button_callback.o(i.task16_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[f3]">task17_key_callback</a> from button_callback.o(i.task17_key_callback) referenced from button_callback.o(i.TASK17_Thread)
 <LI><a href="#[29]">task17_releases</a> from button_callback.o(i.task17_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2b]">task18_releases</a> from button_callback.o(i.task18_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2d]">task19_releases</a> from button_callback.o(i.task19_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2]">task1_releases</a> from button_callback.o(i.task1_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[2f]">task20_releases</a> from button_callback.o(i.task20_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[4]">task2_releases</a> from button_callback.o(i.task2_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[6]">task3_releases</a> from button_callback.o(i.task3_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[8]">task4_releases</a> from button_callback.o(i.task4_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[a]">task5_releases</a> from button_callback.o(i.task5_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[c]">task6_releases</a> from button_callback.o(i.task6_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[e]">task7_releases</a> from button_callback.o(i.task7_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[11]">task8_read_card</a> from button_callback.o(i.task8_read_card) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[10]">task8_releases</a> from button_callback.o(i.task8_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[12]">task8_write_card</a> from button_callback.o(i.task8_write_card) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[17]">task9_delete</a> from button_callback.o(i.task9_delete) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[15]">task9_enroll</a> from button_callback.o(i.task9_enroll) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[16]">task9_identify</a> from button_callback.o(i.task9_identify) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[14]">task9_releases</a> from button_callback.o(i.task9_releases) referenced 2 times from button_callback.o(.data)
 <LI><a href="#[f6]">task_log</a> from button_callback.o(i.task_log) referenced from button_callback.o(i.TASK9_Thread)
 <LI><a href="#[45]">test</a> from hx711.o(i.test) referenced 2 times from hx711.o(.data)
 <LI><a href="#[5f]">usart_lcd_init</a> from usart_lcd.o(i.usart_lcd_init) referenced 2 times from usart_lcd.o(.data)
 <LI><a href="#[fc]">vTimerCallback</a> from rtc.o(i.vTimerCallback) referenced from rtc.o(i.rtc_clock_config)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ef]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[ff]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[117]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[250]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[251]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[252]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[253]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[254]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[255]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[98]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[249]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[248]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9a]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[256]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[92]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strdup
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Corotation
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceAnnouncementDigit
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_string_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_number_data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceAnnouncementDigit
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19e]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[211]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strdup
</UL>

<P><STRONG><a name="[16a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_wight_string
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_widget_val
</UL>

<P><STRONG><a name="[16d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_wight_string
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_val_to_255
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Get_Value
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_val_to_255
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_val_to_255
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_val_to_255
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK4_Thread
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK18_Thread
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK16_Thread
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Get_Value
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Test
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Get_Value
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[260]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[108]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1e2]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[261]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[100]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[262]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>C1016_Clear_Rx_Buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, c1016.o(i.C1016_Clear_Rx_Buffer))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
</UL>

<P><STRONG><a name="[68]"></a>C1016_Enroll</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, c1016.o(i.C1016_Enroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C1016_Enroll &rArr; save_fingerprint_image &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Read_INT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c1016.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>C1016_INT_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, c1016.o(i.C1016_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C1016_INT_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Init
</UL>

<P><STRONG><a name="[69]"></a>C1016_Identify</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, c1016.o(i.C1016_Identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C1016_Identify &rArr; save_fingerprint_image &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_search_fingerprint
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Read_INT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c1016.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>C1016_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, c1016.o(i.C1016_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = C1016_Init &rArr; C1016_SetColor &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_INT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c1016.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>C1016_Print_Format_Ids</STRONG> (Thumb, 74 bytes, Stack size 280 bytes, c1016.o(i.C1016_Print_Format_Ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = C1016_Print_Format_Ids &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c1016.o(.data)
</UL>
<P><STRONG><a name="[127]"></a>C1016_Read_INT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c1016.o(i.C1016_Read_INT))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[134]"></a>C1016_Send_Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, c1016.o(i.C1016_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = C1016_Send_Data &rArr; USART_Send_Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_search
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Generate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
</UL>

<P><STRONG><a name="[131]"></a>C1016_SetColor</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, c1016.o(i.C1016_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = C1016_SetColor &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Init
</UL>

<P><STRONG><a name="[130]"></a>C1016_UART_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, c1016.o(i.C1016_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = C1016_UART_Init &rArr; USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Init
</UL>

<P><STRONG><a name="[6a]"></a>C1016_cmd_Delete</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, c1016.o(i.C1016_cmd_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = C1016_cmd_Delete &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c1016.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>C1016_cmd_Generate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, c1016.o(i.C1016_cmd_Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = C1016_cmd_Generate &rArr; C1016_Send_Data &rArr; USART_Send_Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
</UL>

<P><STRONG><a name="[139]"></a>C1016_cmd_search</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, c1016.o(i.C1016_cmd_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = C1016_cmd_search &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_search_fingerprint
</UL>

<P><STRONG><a name="[12f]"></a>C1016_search_fingerprint</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, c1016.o(i.C1016_search_fingerprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = C1016_search_fingerprint &rArr; C1016_cmd_search &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_search
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
</UL>

<P><STRONG><a name="[141]"></a>CalulateCRC</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rc522.o(i.CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CalulateCRC &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>

<P><STRONG><a name="[142]"></a>ClearBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rc522.o(i.ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ClearBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[75]"></a>Corotation</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, step_motor.o(i.Corotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Corotation &rArr; step_delay &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_delay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>DS18B20_CheckPresence</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_CheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_CheckPresence &rArr; DS18B20_SetPinInput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_delay_us
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_StartConversion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemperature
</UL>

<P><STRONG><a name="[72]"></a>DS18B20_GetTemperature</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS18B20_GetTemperature &rArr; DS18B20_StartConversion &rArr; DS18B20_WriteByte &rArr; DS18B20_SetPinAsOutput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_StartConversion
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>DS18B20_Initialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_Initialize &rArr; DS18B20_CheckPresence &rArr; DS18B20_SetPinInput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinOutput
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinAsOutput
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>DS18B20_ReadBit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_ReadBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_ReadBit &rArr; DS18B20_SetPinInput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinOutput
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinInput
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinAsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadByte
</UL>

<P><STRONG><a name="[159]"></a>DS18B20_ReadByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_ReadByte &rArr; DS18B20_ReadBit &rArr; DS18B20_SetPinInput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemperature
</UL>

<P><STRONG><a name="[157]"></a>DS18B20_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS18B20_Reset &rArr; DS18B20_SetPinAsOutput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinOutput
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinAsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_StartConversion
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemperature
</UL>

<P><STRONG><a name="[15a]"></a>DS18B20_SetPinAsOutput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_SetPinAsOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_SetPinAsOutput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
</UL>

<P><STRONG><a name="[154]"></a>DS18B20_SetPinInput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_SetPinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20_SetPinInput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
</UL>

<P><STRONG><a name="[15b]"></a>DS18B20_SetPinOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ds18b20.o(i.DS18B20_SetPinOutput))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
</UL>

<P><STRONG><a name="[156]"></a>DS18B20_StartConversion</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ds18b20.o(i.DS18B20_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS18B20_StartConversion &rArr; DS18B20_WriteByte &rArr; DS18B20_SetPinAsOutput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemperature
</UL>

<P><STRONG><a name="[158]"></a>DS18B20_WriteByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ds18b20.o(i.DS18B20_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS18B20_WriteByte &rArr; DS18B20_SetPinAsOutput &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinOutput
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinAsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_StartConversion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_GetTemperature
</UL>

<P><STRONG><a name="[99]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, exti.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gd32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gd32f4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>Fan_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fan.o(i.Fan_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Fan_Init &rArr; TIMER4_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fan.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>Fan_Set_Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fan.o(i.Fan_Set_Speed))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fan.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>Get_Key_Press_Count</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch455g.o(i.Get_Key_Press_Count))
<BR>[Address Reference Count : 1]<UL><LI> ch455g.o(.data)
</UL>
<P><STRONG><a name="[18f]"></a>HC595_Dat_Handle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _74hc595.o(i.HC595_Dat_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Scroll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Clear
</UL>

<P><STRONG><a name="[80]"></a>HC595_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, _74hc595.o(i.HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HC595_Init &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[166]"></a>HC595_Send_16Bit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _74hc595.o(i.HC595_Send_16Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Scroll
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Clear
</UL>

<P><STRONG><a name="[61]"></a>HMI_printf</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, usart_lcd.o(i.HMI_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = HMI_printf &rArr; HMI_send_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IIC_Ack &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[11c]"></a>IIC_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IIC_Init &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Hardware_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455G_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Hardware_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
</UL>

<P><STRONG><a name="[172]"></a>IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[13f]"></a>IIC_Read_Byte</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>

<P><STRONG><a name="[13d]"></a>IIC_Send_Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, iic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IIC_Send_Byte &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WR_Reg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>

<P><STRONG><a name="[13c]"></a>IIC_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IIC_Start &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WR_Reg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>

<P><STRONG><a name="[140]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WR_Reg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>

<P><STRONG><a name="[13e]"></a>IIC_Wait_Ack</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WR_Reg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>

<P><STRONG><a name="[91]"></a>Infrared_Distance_Get_Value</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, infrared_distance.o(i.Infrared_Distance_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Infrared_Distance_Get_Value &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared_distance.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>Infrared_Distance_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infrared_distance.o(i.Infrared_Distance_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Infrared_Distance_Init &rArr; adc_init &rArr; gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infrared_distance.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>InitRc522</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rc522.o(i.InitRc522))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = InitRc522 &rArr; M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>LED595Init</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, nixie.o(i.LED595Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED595Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixie.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>LED595SendData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nixie.o(i.LED595SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LED595SendData &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_ShowNum
</UL>

<P><STRONG><a name="[17b]"></a>M500PcdConfigISOType</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rc522.o(i.M500PcdConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
</UL>

<P><STRONG><a name="[87]"></a>Matrix_Display_Clear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, _74hc595.o(i.Matrix_Display_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Matrix_Display_Clear &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Dat_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>Matrix_Display_CountDown_99_Blocking</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _74hc595.o(i.Matrix_Display_CountDown_99_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Matrix_Display_CountDown_99_Blocking &rArr; Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>Matrix_Display_CountUp_99_Blocking</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _74hc595.o(i.Matrix_Display_CountUp_99_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Matrix_Display_CountUp_99_Blocking &rArr; Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>Matrix_Display_CountUp_Blocking_9</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, _74hc595.o(i.Matrix_Display_CountUp_Blocking_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Matrix_Display_CountUp_Blocking_9 &rArr; Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>Matrix_Display_Count_Down_Blocking_9</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, _74hc595.o(i.Matrix_Display_Count_Down_Blocking_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Matrix_Display_Count_Down_Blocking_9 &rArr; Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>Matrix_Display_Img</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, _74hc595.o(i.Matrix_Display_Img))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Matrix_Display_Img &rArr; Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>Matrix_Display_Scroll</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, _74hc595.o(i.Matrix_Display_Scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Matrix_Display_Scroll &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Dat_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>Matrix_Display_Static</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, _74hc595.o(i.Matrix_Display_Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Matrix_Display_Static &rArr; HC595_Send_16Bit &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Dat_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Img
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Count_Down_Blocking_9
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_Blocking_9
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_99_Blocking
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountDown_99_Blocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _74hc595.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>Nixie_Count_Down_Blocking</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nixie.o(i.Nixie_Count_Down_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Nixie_Count_Down_Blocking &rArr; Nixie_ShowNum &rArr; LED595SendData &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_ShowNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixie.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>Nixie_Count_Up_Blocking</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nixie.o(i.Nixie_Count_Up_Blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Nixie_Count_Up_Blocking &rArr; Nixie_ShowNum &rArr; LED595SendData &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_ShowNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixie.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>Nixie_Off</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nixie.o(i.Nixie_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Nixie_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixie.o(.data)
</UL>
<P><STRONG><a name="[190]"></a>Nixie_Select_One</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nixie.o(i.Nixie_Select_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Nixie_Select_One &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_ShowNum
</UL>

<P><STRONG><a name="[8b]"></a>Nixie_ShowNum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nixie.o(i.Nixie_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Nixie_ShowNum &rArr; LED595SendData &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Select_One
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595SendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Up_Blocking
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Down_Blocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nixie.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>PcdAntennaOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rc522.o(i.PcdAntennaOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = PcdAntennaOff &rArr; ClearBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
</UL>

<P><STRONG><a name="[17a]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(i.PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
</UL>

<P><STRONG><a name="[196]"></a>PcdAnticoll</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, rc522.o(i.PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[198]"></a>PcdAuthState</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, rc522.o(i.PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[197]"></a>PcdComMF522</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, rc522.o(i.PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[199]"></a>PcdRead</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, rc522.o(i.PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[19a]"></a>PcdRequest</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rc522.o(i.PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[178]"></a>PcdReset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rc522.o(i.PcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PcdReset &rArr; WriteRawRC &rArr; RC522_WR_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
</UL>

<P><STRONG><a name="[19b]"></a>PcdSelect</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rc522.o(i.PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PcdSelect &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
</UL>

<P><STRONG><a name="[19c]"></a>PcdWrite</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, rc522.o(i.PcdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = PcdWrite &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
</UL>

<P><STRONG><a name="[19d]"></a>RC522_RD_Reg</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rc522.o(i.RC522_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[59]"></a>RC522_Read</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, rc522.o(i.RC522_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = RC522_Read &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.data)
</UL>
<P><STRONG><a name="[19f]"></a>RC522_WR_Reg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rc522.o(i.RC522_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RC522_WR_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>

<P><STRONG><a name="[5a]"></a>RC522_Write</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, rc522.o(i.RC522_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = RC522_Write &rArr; PcdWrite &rArr; PcdComMF522 &rArr; SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>ReadRawRC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rc522.o(i.ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[51]"></a>Read_Keyboard</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ch455g.o(i.Read_Keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Read_Keyboard &rArr; CH455_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch455g.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>Reverse</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, step_motor.o(i.Reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Reverse &rArr; step_delay &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_delay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>SDA_IN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iic.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_IN &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[171]"></a>SDA_OUT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iic.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDA_OUT &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[74]"></a>STOP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, step_motor.o(i.STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STOP &rArr; set_step
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>Servo_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, servo.o(i.Servo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Servo_Init &rArr; TIMER4_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> servo.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>Servo_Set_Angle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, servo.o(i.Servo_Set_Angle))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> servo.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>SetBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rc522.o(i.SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SetBitMask &rArr; ReadRawRC &rArr; RC522_RD_Reg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[73]"></a>Step_Hardware_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, step_motor.o(i.Step_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Step_Hardware_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>SystemInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_168m_16m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>TIMER1_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, timer.o(i.TIMER1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Software_Init
</UL>

<P><STRONG><a name="[ba]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gd32f4xx_it.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIMER3_IRQHandler &rArr; vTaskGenericNotifyGiveFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGenericNotifyGiveFromISR
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>TIMER3_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, timer.o(i.TIMER3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER3_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[161]"></a>TIMER4_init</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, timer.o(i.TIMER4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIMER4_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
</UL>

<P><STRONG><a name="[c1]"></a>USART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.USART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gd32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>USART2_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, gd32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>USART5_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>USART_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_coherence_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_first_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_UART_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_lcd_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice_Init
</UL>

<P><STRONG><a name="[125]"></a>USART_Send_Buff</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usart.o(i.USART_Send_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Send_Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_to_slider
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_curve
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceAnnouncementDigit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bkrc_Send_Cmd
</UL>

<P><STRONG><a name="[1c8]"></a>USART_Send_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.USART_Send_Byte))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
</UL>

<P><STRONG><a name="[fa]"></a>UartProcessTask</STRONG> (Thumb, 36 bytes, Stack size 264 bytes, main.o(i.UartProcessTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = UartProcessTask &rArr; process_usart2_received_data &rArr; button_callback &rArr; start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_usart2_received_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.freertos_init)
</UL>
<P><STRONG><a name="[7f]"></a>Ultrasonic_Get_Cm</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ultrasonic.o(i.Ultrasonic_Get_Cm))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Ultrasonic_Get_Cm &rArr; Ultrasonic_Send_Pulse &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Send_Pulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasonic.o(.data)
</UL>
<P><STRONG><a name="[1cd]"></a>Ultrasonic_Hardware_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ultrasonic.o(i.Ultrasonic_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ultrasonic_Hardware_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Init
</UL>

<P><STRONG><a name="[7d]"></a>Ultrasonic_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ultrasonic.o(i.Ultrasonic_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ultrasonic_Init &rArr; Ultrasonic_Software_Init &rArr; TIMER1_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Software_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Hardware_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasonic.o(.data)
</UL>
<P><STRONG><a name="[1cc]"></a>Ultrasonic_Send_Pulse</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ultrasonic.o(i.Ultrasonic_Send_Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Ultrasonic_Send_Pulse &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Get_Cm
</UL>

<P><STRONG><a name="[1ce]"></a>Ultrasonic_Software_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ultrasonic.o(i.Ultrasonic_Software_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Ultrasonic_Software_Init &rArr; TIMER1_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Init
</UL>

<P><STRONG><a name="[7e]"></a>Ultrasonic_Test</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ultrasonic.o(i.Ultrasonic_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Ultrasonic_Test &rArr; Ultrasonic_Send_Pulse &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Send_Pulse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultrasonic.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>WriteRawRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rc522.o(i.WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WriteRawRC &rArr; RC522_WR_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[1d1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[265]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[129]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task9_delete
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8_write_card
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task8_read_card
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK7_Thread
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK6_Thread
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_task
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_usart2_received_data
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_log
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_search_fingerprint
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_ShowNum
</UL>

<P><STRONG><a name="[266]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[267]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d3]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[268]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[132]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK13_Thread
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Print_Format_Ids
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_to_slider
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_curve
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_cmd
</UL>

<P><STRONG><a name="[269]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[26a]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d4]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26b]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[121]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowInt32Num
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Test
</UL>

<P><STRONG><a name="[26c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[26d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d5]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26e]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[26f]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[270]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[16e]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_log_callback
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_log
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
</UL>

<P><STRONG><a name="[1d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[183]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
</UL>

<P><STRONG><a name="[176]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Get_Value
</UL>

<P><STRONG><a name="[182]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
</UL>

<P><STRONG><a name="[1da]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1dd]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1db]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1e0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1de]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[271]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[272]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[273]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1dc]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1f4]"></a>adc_calibration_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_calibration_enable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1f0]"></a>adc_channel_length_config</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_channel_length_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[237]"></a>adc_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[1ef]"></a>adc_data_alignment_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_data_alignment_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1e7]"></a>adc_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_adc.o(i.adc_deinit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1f3]"></a>adc_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_enable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1f2]"></a>adc_external_trigger_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_external_trigger_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1f1]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_external_trigger_source_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1f8]"></a>adc_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[1f7]"></a>adc_flag_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[177]"></a>adc_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_init &rArr; gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Init
</UL>

<P><STRONG><a name="[1f5]"></a>adc_regular_channel_config</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gd32f4xx_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[1f9]"></a>adc_regular_data_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_regular_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[174]"></a>adc_sample</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, adc.o(i.adc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_sample &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Distance_Get_Value
</UL>

<P><STRONG><a name="[1f6]"></a>adc_software_trigger_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[1ee]"></a>adc_special_function_config</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_special_function_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1ed]"></a>adc_sync_mode_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_sync_mode_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
</UL>

<P><STRONG><a name="[1fa]"></a>button_callback</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, button_callback.o(i.button_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = button_callback &rArr; start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_task
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_usart2_received_data
</UL>

<P><STRONG><a name="[12a]"></a>capture_fingerprint_image</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, c1016.o(i.capture_fingerprint_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = capture_fingerprint_image &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[128]"></a>check_id_registered</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, c1016.o(i.check_id_registered))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_id_registered &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[11e]"></a>delay_1ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waterfall_led
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkrc_callback
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK9_Thread
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK8_Thread
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK7_Thread
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK6_Thread
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK4_Thread
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK2_Thread
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK20_Thread
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK19_Thread
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK18_Thread
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK17_Thread
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK16_Thread
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK15_Thread
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK13_Thread
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK12_Thread
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK10_Thread
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Test
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Read
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Breath
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_periph_config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_delay
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetTemperature
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GetHumidity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceAnnouncementDigit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRc522
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Select_One
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Static
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Scroll
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Img
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Get_Cm
</UL>

<P><STRONG><a name="[168]"></a>delay_1us</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, systick.o(i.delay_1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Sound
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Db
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595SendData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Send_Pulse
</UL>

<P><STRONG><a name="[14b]"></a>dht11_delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dht11.o(i.dht11_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[155]"></a>ds18b20_delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ds18b20.o(i.ds18b20_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_WriteByte
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
</UL>

<P><STRONG><a name="[201]"></a>eTaskGetState</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_task
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[202]"></a>encoder_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, motor.o(i.encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = encoder_init &rArr; exti_init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[203]"></a>exti_init</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, gd32f4xx_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>

<P><STRONG><a name="[15f]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[f7]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[195]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_string_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_number_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_lcd_data
</UL>

<P><STRONG><a name="[16b]"></a>free_lcd_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart_lcd.o(i.free_lcd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_lcd_data &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_wight_string
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_widget_val
</UL>

<P><STRONG><a name="[204]"></a>freertos_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.freertos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = freertos_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>get_days_in_month</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, rtc.o(i.get_days_in_month))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_days_in_month
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
</UL>

<P><STRONG><a name="[7a]"></a>get_motor_speed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, motor.o(i.get_motor_speed))
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[1bc]"></a>gpio_af_set</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
</UL>

<P><STRONG><a name="[165]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Hardware_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Send_Pulse
</UL>

<P><STRONG><a name="[167]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Send_16Bit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Send_Pulse
</UL>

<P><STRONG><a name="[118]"></a>gpio_bit_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Db
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Test
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Rgb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinOutput
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Select_One
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Off
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
</UL>

<P><STRONG><a name="[133]"></a>gpio_input_bit_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_ReadBit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_CheckPresence
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Read_INT
</UL>

<P><STRONG><a name="[11a]"></a>gpio_mode_set</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HX711_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Hardware_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinInput
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_SetPinAsOutput
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_OUT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_IN
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Hardware_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_INT_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Hardware_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
</UL>

<P><STRONG><a name="[11b]"></a>gpio_output_options_set</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HX711_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Hardware_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_OUT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Hardware_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Hardware_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
</UL>

<P><STRONG><a name="[20a]"></a>hardware_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hardware_init &rArr; USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc.o(i.is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_days_in_month
</UL>

<P><STRONG><a name="[f1]"></a>keyboard_callback</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, button_callback.o(i.keyboard_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keyboard_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK12_Thread)
</UL>
<P><STRONG><a name="[ed]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; freertos_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[194]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_string_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_number_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strdup
</UL>

<P><STRONG><a name="[16f]"></a>map_val_to_255</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usart_lcd.o(i.map_val_to_255))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = map_val_to_255 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_curve
</UL>

<P><STRONG><a name="[12c]"></a>merge_fingerprint_images</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, c1016.o(i.merge_fingerprint_images))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = merge_fingerprint_images &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[20c]"></a>motor_gpio_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor.o(i.motor_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_gpio_init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[78]"></a>motor_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = motor_init &rArr; motor_timer_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[20d]"></a>motor_timer_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, motor.o(i.motor_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = motor_timer_init &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[1cf]"></a>my_EXTI_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, exti.o(i.my_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = my_EXTI_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Software_Init
</UL>

<P><STRONG><a name="[210]"></a>my_strdup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart_lcd.o(i.my_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = my_strdup &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_string_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_number_data
</UL>

<P><STRONG><a name="[1af]"></a>nvic_irq_enable</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>

<P><STRONG><a name="[1b2]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[169]"></a>parse_lcd_number_data</STRONG> (Thumb, 204 bytes, Stack size 288 bytes, usart_lcd.o(i.parse_lcd_number_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = parse_lcd_number_data &rArr; my_strdup &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strdup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_widget_val
</UL>

<P><STRONG><a name="[16c]"></a>parse_lcd_string_data</STRONG> (Thumb, 240 bytes, Stack size 544 bytes, usart_lcd.o(i.parse_lcd_string_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = parse_lcd_string_data &rArr; my_strdup &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strdup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_get_wight_string
</UL>

<P><STRONG><a name="[1ca]"></a>process_usart2_received_data</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gd32f4xx_it.o(i.process_usart2_received_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = process_usart2_received_data &rArr; button_callback &rArr; start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartProcessTask
</UL>

<P><STRONG><a name="[234]"></a>pvPortMalloc</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[160]"></a>pwm_gpio_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(i.pwm_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pwm_gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Init
</UL>

<P><STRONG><a name="[222]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[23f]"></a>rcu_clock_freq_get</STRONG> (Thumb, 184 bytes, Stack size 52 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[119]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HX711_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_LED_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_gpio_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_Hardware_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Initialize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_OUT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_IN
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Hardware_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_INT_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED595Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Hardware_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_gpio_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>

<P><STRONG><a name="[1e9]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1e8]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[1a9]"></a>rcu_timer_clock_prescaler_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_timer_clock_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[1a2]"></a>rtc_clock_config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtc.o(i.rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rtc_clock_config &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK5_Thread
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK11_Thread
</UL>

<P><STRONG><a name="[1a3]"></a>rtc_get_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(i.rtc_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK5_Thread
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK11_Thread
</UL>

<P><STRONG><a name="[12b]"></a>save_fingerprint_image</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, c1016.o(i.save_fingerprint_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = save_fingerprint_image &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Generate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[12d]"></a>save_fingerprint_template</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, c1016.o(i.save_fingerprint_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = save_fingerprint_template &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Send_Data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Clear_Rx_Buffer
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Data_Verification
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
</UL>

<P><STRONG><a name="[79]"></a>set_motor_speed</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, motor.o(i.set_motor_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_motor_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[147]"></a>set_step</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, step_motor.o(i.set_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_step
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STOP
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Corotation
</UL>

<P><STRONG><a name="[1df]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1fb]"></a>start_task</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, task_manager.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_callback
</UL>

<P><STRONG><a name="[148]"></a>step_delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, step_motor.o(i.step_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = step_delay &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Corotation
</UL>

<P><STRONG><a name="[77]"></a>step_motor_set_speed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, step_motor.o(i.step_motor_set_speed))
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[1fc]"></a>stop_task</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, task_manager.o(i.stop_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stop_task &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_callback
</UL>

<P><STRONG><a name="[20f]"></a>syscfg_exti_line_config</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f4xx_syscfg.o(i.syscfg_exti_line_config))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_EXTI_Init
</UL>

<P><STRONG><a name="[23e]"></a>systick_clksource_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.systick_clksource_set))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[20b]"></a>systick_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(i.systick_config))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clksource_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[f6]"></a>task_log</STRONG> (Thumb, 44 bytes, Stack size 280 bytes, button_callback.o(i.task_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = task_log &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK9_Thread)
</UL>
<P><STRONG><a name="[1ad]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1b3]"></a>timer_channel_output_config</STRONG> (Thumb, 464 bytes, Stack size 12 bytes, gd32f4xx_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1b4]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[162]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Set_Angle
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Set_Speed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_speed
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1b5]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[20e]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1ab]"></a>timer_deinit</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[15e]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultrasonic_Get_Cm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1ac]"></a>timer_init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, gd32f4xx_timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[1ae]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[1a7]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>timer_struct_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_timer_init
</UL>

<P><STRONG><a name="[200]"></a>ulTaskGenericNotifyTake</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tasks.o(i.ulTaskGenericNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>

<P><STRONG><a name="[1be]"></a>usart_baudrate_set</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c6]"></a>usart_data_first_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_first_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1b8]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Byte
</UL>

<P><STRONG><a name="[1bd]"></a>usart_deinit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c7]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1b7]"></a>usart_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
</UL>

<P><STRONG><a name="[1c4]"></a>usart_hardware_flow_coherence_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_hardware_flow_coherence_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c5]"></a>usart_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1b9]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c3]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c1]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c2]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c0]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[213]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[24d]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[218]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[221]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[214]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[241]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1fe]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1ff]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[21d]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[247]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[22e]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[124]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK5_Thread
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK3_Thread
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK11_Thread
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Sound
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Play_Note
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Test
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_image
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_search_fingerprint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_search
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Identify
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_Enroll
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Up_Blocking
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Down_Blocking
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Count_Down_Blocking_9
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_Blocking_9
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_99_Blocking
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountDown_99_Blocking
</UL>

<P><STRONG><a name="[1a5]"></a>vTaskDelete</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK9_Thread
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_task
</UL>

<P><STRONG><a name="[1b0]"></a>vTaskGenericNotifyGiveFromISR</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, tasks.o(i.vTaskGenericNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskGenericNotifyGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[233]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[243]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[240]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[23a]"></a>vTaskPrioritySet</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[23b]"></a>vTaskResume</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[207]"></a>vTaskStartScheduler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_init
</UL>

<P><STRONG><a name="[23c]"></a>vTaskSuspend</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_task
</UL>

<P><STRONG><a name="[22c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[101]"></a>vTaskSwitchContext</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[fc]"></a>vTimerCallback</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtc.o(i.vTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTimerCallback &rArr; get_days_in_month
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_days_in_month
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rtc_clock_config)
</UL>
<P><STRONG><a name="[246]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[205]"></a>xQueueGenericCreate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[21f]"></a>xQueueGenericReset</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[24a]"></a>xQueueGenericSend</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1bb]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1cb]"></a>xQueueReceive</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartProcessTask
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[24c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[206]"></a>xTaskCreate</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1fd]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>

<P><STRONG><a name="[24e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[17d]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK11_Thread
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Db
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Timer_CreateOrRestart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink_Control
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Up_Blocking
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nixie_Count_Down_Blocking
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_Count_Down_Blocking_9
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_Blocking_9
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountUp_99_Blocking
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Display_CountDown_99_Blocking
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1a0]"></a>xTaskIncrementTick</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[232]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[22d]"></a>xTaskResumeAll</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[180]"></a>xTimerCreate</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Timer_CreateOrRestart
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
</UL>

<P><STRONG><a name="[245]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17f]"></a>xTimerGenericCommand</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Timer_CreateOrRestart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TimerPwm_Callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Stop_TimerPwm
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18]"></a>TASK10_Thread</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, button_callback.o(i.TASK10_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK10_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>TASK11_Thread</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, button_callback.o(i.TASK11_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TASK11_Thread &rArr; rtc_clock_config &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>TASK12_Thread</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, button_callback.o(i.TASK12_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK12_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>TASK13_Thread</STRONG> (Thumb, 68 bytes, Stack size 256 bytes, button_callback.o(i.TASK13_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TASK13_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>TASK14_Thread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, button_callback.o(i.TASK14_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TASK14_Thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>TASK15_Thread</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, button_callback.o(i.TASK15_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK15_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>TASK16_Thread</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, button_callback.o(i.TASK16_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK16_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>TASK17_Thread</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, button_callback.o(i.TASK17_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK17_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>TASK18_Thread</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, button_callback.o(i.TASK18_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK18_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>TASK19_Thread</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, button_callback.o(i.TASK19_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TASK19_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>TASK1_Thread</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, button_callback.o(i.TASK1_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TASK1_Thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>TASK20_Thread</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, button_callback.o(i.TASK20_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK20_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>TASK2_Thread</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, button_callback.o(i.TASK2_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TASK2_Thread &rArr; waterfall_led &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waterfall_led
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>TASK3_Thread</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, button_callback.o(i.TASK3_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK3_Thread &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>TASK4_Thread</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, button_callback.o(i.TASK4_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK4_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>TASK5_Thread</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, button_callback.o(i.TASK5_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TASK5_Thread &rArr; rtc_clock_config &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>TASK6_Thread</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, button_callback.o(i.TASK6_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TASK6_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>TASK7_Thread</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, button_callback.o(i.TASK7_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK7_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>TASK8_Thread</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, button_callback.o(i.TASK8_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK8_Thread &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>TASK9_Thread</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, button_callback.o(i.TASK9_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TASK9_Thread &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>bkrc_callback</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, button_callback.o(i.bkrc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bkrc_callback &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK3_Thread)
</UL>
<P><STRONG><a name="[f2]"></a>key_callback</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, button_callback.o(i.key_callback))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK13_Thread)
</UL>
<P><STRONG><a name="[f5]"></a>rc522_log_callback</STRONG> (Thumb, 36 bytes, Stack size 280 bytes, button_callback.o(i.rc522_log_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rc522_log_callback &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK8_Thread)
</UL>
<P><STRONG><a name="[19]"></a>task10_releases</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, button_callback.o(i.task10_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task10_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>task11_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task11_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task11_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>task12_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task12_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task12_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>task13_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task13_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task13_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>task14_releases</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button_callback.o(i.task14_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task14_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>task15_corotation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button_callback.o(i.task15_corotation))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>task15_releases</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button_callback.o(i.task15_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task15_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>task15_reversal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button_callback.o(i.task15_reversal))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>task16_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task16_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task16_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>task17_key_callback</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, button_callback.o(i.task17_key_callback))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(i.TASK17_Thread)
</UL>
<P><STRONG><a name="[29]"></a>task17_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task17_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task17_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>task18_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task18_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task18_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>task19_releases</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, button_callback.o(i.task19_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task19_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>task1_releases</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, button_callback.o(i.task1_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task1_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>task20_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task20_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task20_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>task2_releases</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, button_callback.o(i.task2_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task2_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>task3_releases</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button_callback.o(i.task3_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task3_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>task4_releases</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, button_callback.o(i.task4_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task4_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>task5_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task5_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task5_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>task6_releases</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button_callback.o(i.task6_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task6_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>task7_releases</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, button_callback.o(i.task7_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task7_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>task8_read_card</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button_callback.o(i.task8_read_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task8_read_card &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>task8_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task8_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task8_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>task8_write_card</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, button_callback.o(i.task8_write_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task8_write_card &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>task9_delete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, button_callback.o(i.task9_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task9_delete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>task9_enroll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button_callback.o(i.task9_enroll))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>task9_identify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button_callback.o(i.task9_identify))
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>task9_releases</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, button_callback.o(i.task9_releases))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task9_releases
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_callback.o(.data)
</UL>
<P><STRONG><a name="[1a4]"></a>waterfall_led</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, button_callback.o(i.waterfall_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = waterfall_led &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK2_Thread
</UL>

<P><STRONG><a name="[1ec]"></a>adc_periph_config</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, adc.o(i.adc_periph_config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sync_mode_config
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>

<P><STRONG><a name="[1eb]"></a>gpio_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[1ea]"></a>rcu_config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(i.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[34]"></a>LED_Blink_Control</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rgb_led.o(i.LED_Blink_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Blink_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LED_Breath</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rgb_led.o(i.LED_Breath))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_Breath &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LED_OFF</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rgb_led.o(i.LED_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LED_Set_Color</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rgb_led.o(i.LED_Set_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Set_Color &rArr; LED_Set_Rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TimerPwm_Callback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Stop_TimerPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LED_Set_Color_TimerPwm</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rgb_led.o(i.LED_Set_Color_TimerPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LED_Set_Color_TimerPwm &rArr; LED_Timer_CreateOrRestart &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Timer_CreateOrRestart
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Stop_TimerPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LED_Set_Rgb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rgb_led.o(i.LED_Set_Rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Set_Rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LED_Stop_TimerPwm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rgb_led.o(i.LED_Stop_TimerPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LED_Stop_TimerPwm &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Color
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_TimerPwm_Callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Color_TimerPwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LED_Test</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rgb_led.o(i.LED_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LED_Test &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>LED_TimerPwm_Callback</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rgb_led.o(i.LED_TimerPwm_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LED_TimerPwm_Callback &rArr; LED_Stop_TimerPwm &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Stop_TimerPwm
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Color
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(i.LED_Timer_CreateOrRestart)
</UL>
<P><STRONG><a name="[17e]"></a>LED_Timer_CreateOrRestart</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rgb_led.o(i.LED_Timer_CreateOrRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LED_Timer_CreateOrRestart &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Set_Color_TimerPwm
</UL>

<P><STRONG><a name="[30]"></a>RGB_LED_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, rgb_led.o(i.RGB_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RGB_LED_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rgb_led.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>BEEP_Control</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, beep.o(i.BEEP_Control))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Sound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>BEEP_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, beep.o(i.BEEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BEEP_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>Beep_Play_Music</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, beep.o(i.Beep_Play_Music))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Beep_Play_Music &rArr; Beep_Play_Note &rArr; Play_Sound &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Play_Note
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>Beep_Play_Note</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, beep.o(i.Beep_Play_Note))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Beep_Play_Note &rArr; Play_Sound &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Sound
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Play_Music
</UL>

<P><STRONG><a name="[3c]"></a>Play_Db</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, beep.o(i.Play_Db))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Play_Db &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>Play_Sound</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, beep.o(i.Play_Sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Play_Sound &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Play_Note
</UL>

<P><STRONG><a name="[239]"></a>Clicked</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, key.o(i.Clicked))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[3d]"></a>KEY_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>read_all_keys</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, key.o(i.read_all_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_all_keys &rArr; read_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.data)
</UL>
<P><STRONG><a name="[238]"></a>read_key</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, key.o(i.read_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clicked
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_keys
</UL>

<P><STRONG><a name="[40]"></a>BH1750_Get_Lx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bh1750.o(i.BH1750_Get_Lx))
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>BH1750_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bh1750.o(i.BH1750_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BH1750_Init &rArr; IIC_Init &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>BH1750_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bh1750.o(i.BH1750_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BH1750_Read &rArr; Start_BH1750 &rArr; Cmd_Write_BH1750 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_BH1750
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>BH1750_Test</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bh1750.o(i.BH1750_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = BH1750_Test &rArr; Start_BH1750 &rArr; Cmd_Write_BH1750 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_BH1750
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_BH1750
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_BH1750
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bh1750.o(.data)
</UL>
<P><STRONG><a name="[146]"></a>Cmd_Write_BH1750</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bh1750.o(i.Cmd_Write_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Cmd_Write_BH1750 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_BH1750
</UL>

<P><STRONG><a name="[120]"></a>Convert_BH1750</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bh1750.o(i.Convert_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Convert_BH1750 &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Test
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Read
</UL>

<P><STRONG><a name="[11f]"></a>Read_BH1750</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bh1750.o(i.Read_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Read_BH1750 &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Test
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Read
</UL>

<P><STRONG><a name="[11d]"></a>Start_BH1750</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bh1750.o(i.Start_BH1750))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Start_BH1750 &rArr; Cmd_Write_BH1750 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_Write_BH1750
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Test
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Read
</UL>

<P><STRONG><a name="[43]"></a>GPIO_HX711_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hx711.o(i.GPIO_HX711_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_HX711_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx711.o(.data)
</UL>
<P><STRONG><a name="[163]"></a>Get_Maopi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hx711.o(i.Get_Maopi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Maopi &rArr; HX711_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_HX711_Init
</UL>

<P><STRONG><a name="[44]"></a>Get_Weight</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hx711.o(i.Get_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Weight &rArr; HX711_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx711.o(.data)
</UL>
<P><STRONG><a name="[164]"></a>HX711_Read</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, hx711.o(i.HX711_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
</UL>

<P><STRONG><a name="[45]"></a>test</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, hx711.o(i.test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hx711.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>OLED_Clear</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>OLED_DrawBMP</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, oled.o(i.OLED_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OLED_DrawBMP &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>OLED_DrawFont16</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, oled.o(i.OLED_DrawFont16))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OLED_DrawFont16 &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>OLED_DrawFont32</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, oled.o(i.OLED_DrawFont32))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OLED_DrawFont32 &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[193]"></a>OLED_Hardware_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(i.OLED_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OLED_Hardware_Init &rArr; IIC_Init &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[46]"></a>OLED_Init</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Hardware_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>OLED_Print</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, oled.o(i.OLED_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = OLED_Print &rArr; OLED_Show_Str &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Str
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[192]"></a>OLED_Set_Pos</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont32
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont16
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[48]"></a>OLED_ShowChar</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Str
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowInt32Num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>OLED_ShowInt32Num</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, oled.o(i.OLED_ShowInt32Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = OLED_ShowInt32Num &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>OLED_ShowString</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>OLED_Show_Str</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, oled.o(i.OLED_Show_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = OLED_Show_Str &rArr; OLED_ShowChar &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont32
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont16
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(.data)
</UL>
<P><STRONG><a name="[191]"></a>OLED_WR_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OLED_WR_Byte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont32
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawFont16
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[50]"></a>CH455G_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ch455g.o(i.CH455G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CH455G_Init &rArr; CH455_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455_Write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch455g.o(.data)
</UL>
<P><STRONG><a name="[13b]"></a>CH455_Read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ch455g.o(i.CH455_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CH455_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Keyboard
</UL>

<P><STRONG><a name="[13a]"></a>CH455_Write</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ch455g.o(i.CH455_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CH455_Write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH455G_Init
</UL>

<P><STRONG><a name="[181]"></a>MPU6050_Get_Angle</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, mpu6050.o(i.MPU6050_Get_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MPU6050_Get_Angle &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_GetData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Test
</UL>

<P><STRONG><a name="[184]"></a>MPU6050_Hardware_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu6050.o(i.MPU6050_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MPU6050_Hardware_Init &rArr; IIC_Init &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[53]"></a>MPU6050_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MPU6050_Init &rArr; MPU6050_Hardware_Init &rArr; IIC_Init &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Hardware_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[185]"></a>MPU6050_Software_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050_Software_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[57]"></a>MPU6050_Test</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, mpu6050.o(i.MPU6050_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MPU6050_Test &rArr; MPU6050_Get_Angle &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>MPU_GetData</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MPU_GetData &rArr; MPU6050_Get_Angle &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Get_Angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Get_Accelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_GetData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Test
</UL>

<P><STRONG><a name="[56]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>MPU_Get_Temperature</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MPU_Get_Temperature &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[186]"></a>MPU_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Software_Init
</UL>

<P><STRONG><a name="[189]"></a>MPU_Read_Byte</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Temperature
</UL>

<P><STRONG><a name="[188]"></a>MPU_Read_Len</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MPU_Read_Len &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_1us &rArr; ulTaskGenericNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>

<P><STRONG><a name="[18c]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Accel_Fsr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[18b]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_Gyro_Fsr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[18e]"></a>MPU_Set_LPF</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpu6050.o(i.MPU_Set_LPF), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[18d]"></a>MPU_Set_Rate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Set_Rate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[18a]"></a>MPU_Write_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Write_Byte), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[5d]"></a>Bkrc_Send_Cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, speak.o(i.Bkrc_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bkrc_Send_Cmd &rArr; USART_Send_Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> speak.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>VoiceAnnouncementDigit</STRONG> (Thumb, 376 bytes, Stack size 144 bytes, speak.o(i.VoiceAnnouncementDigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VoiceAnnouncementDigit &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> speak.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>Voice_Drive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speak.o(i.Voice_Drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Voice_Drive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> speak.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>Voice_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, speak.o(i.Voice_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Voice_Init &rArr; USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> speak.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>HMI_get_widget_val</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart_lcd.o(i.HMI_get_widget_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = HMI_get_widget_val &rArr; parse_lcd_number_data &rArr; my_strdup &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_number_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_lcd_data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>HMI_get_wight_string</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usart_lcd.o(i.HMI_get_wight_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = HMI_get_wight_string &rArr; parse_lcd_string_data &rArr; my_strdup &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lcd_string_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_lcd_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>HMI_send_cmd</STRONG> (Thumb, 32 bytes, Stack size 264 bytes, usart_lcd.o(i.HMI_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HMI_send_cmd &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>HMI_send_curve</STRONG> (Thumb, 78 bytes, Stack size 288 bytes, usart_lcd.o(i.HMI_send_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HMI_send_curve &rArr; map_val_to_255 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_val_to_255
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>HMI_send_string</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, usart_lcd.o(i.HMI_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HMI_send_string &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>HMI_send_to_slider</STRONG> (Thumb, 34 bytes, Stack size 264 bytes, usart_lcd.o(i.HMI_send_to_slider))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HMI_send_to_slider &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send_Buff
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>usart_lcd_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usart_lcd.o(i.usart_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usart_lcd_init &rArr; USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_lcd.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>C1016_Data_Verification</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, c1016.o(i.C1016_Data_Verification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C1016_Data_Verification
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fingerprint_template
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_fingerprint_images
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_registered
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_fingerprint_image
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_search
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Generate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_cmd_Delete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C1016_SetColor
</UL>

<P><STRONG><a name="[149]"></a>DHT11_Check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DHT11_Check &rArr; DQ_IN &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_delay_us
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Software_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[6d]"></a>DHT11_GetHumidity</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dht11.o(i.DHT11_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DHT11_GetHumidity &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>DHT11_GetTemperature</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dht11.o(i.DHT11_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DHT11_GetTemperature &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>DHT11_Hardware_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_Hardware_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[6e]"></a>DHT11_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DHT11_Init &rArr; DHT11_Software_Init &rArr; DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Software_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Hardware_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(.data)
</UL>
<P><STRONG><a name="[14e]"></a>DHT11_Read_Bit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
</UL>

<P><STRONG><a name="[14f]"></a>DHT11_Read_Byte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Read_Byte &rArr; DHT11_Read_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[150]"></a>DHT11_Read_Data</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dht11.o(i.DHT11_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DHT11_Read_Data &rArr; DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Test
</UL>

<P><STRONG><a name="[151]"></a>DHT11_Rst</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_delay_us
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DQ_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Software_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[14d]"></a>DHT11_Software_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Software_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DHT11_Software_Init &rArr; DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[70]"></a>DHT11_Test</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dht11.o(i.DHT11_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DHT11_Test &rArr; DHT11_Read_Data &rArr; DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>DHT11_Update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dht11.o(i.DHT11_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DHT11_Update &rArr; DHT11_Read_Data &rArr; DHT11_Rst &rArr; delay_1ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dht11.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>DQ_IN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dht11.o(i.DQ_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DQ_IN &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>

<P><STRONG><a name="[152]"></a>DQ_OUT</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dht11.o(i.DQ_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DQ_OUT &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
</UL>

<P><STRONG><a name="[21b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[21c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[21e]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[225]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[226]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[231]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[212]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[215]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[219]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[21a]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[fd]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[220]"></a>prvInitialiseNewTask</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[216]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[242]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[244]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[217]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[230]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[223]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[224]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[227]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[229]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[22b]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[228]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[22a]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[22f]"></a>prvSwitchTimerLists</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[fe]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[235]"></a>prvHeapInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[236]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[fb]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[23d]"></a>system_clock_168m_16m_hxtal</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_168m_16m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_168m_16m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1a1]"></a>system_clock_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config &rArr; system_clock_168m_16m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_16m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1e3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f8]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[f9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
